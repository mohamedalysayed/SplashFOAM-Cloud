import React, { useRef, useState, useEffect } from "react";
import { Canvas, useThree } from "@react-three/fiber";
import { OrbitControls, Html } from "@react-three/drei";
import { STLLoader } from "three/examples/jsm/loaders/STLLoader";
import { Box3, Vector3, Mesh } from "three";
import jsPDF from "jspdf";

// STL Viewer Component
function STLViewer({ fileUrl }) {
  const [geometry, setGeometry] = useState(null);
  const { camera, gl } = useThree();
  const controlsRef = useRef();

  useEffect(() => {
    if (fileUrl) {
      const loader = new STLLoader();
      loader.load(
        fileUrl,
        (geometry) => {
          const mesh = new Mesh(geometry);
          const boundingBox = new Box3().setFromObject(mesh);
          const center = new Vector3();
          boundingBox.getCenter(center);
          const size = new Vector3();
          boundingBox.getSize(size);
          const maxAxis = Math.max(size.x, size.y, size.z);

          geometry.translate(-center.x, -center.y, -center.z);

          const distance = maxAxis * 2.5;
          camera.position.set(0, 0, distance);
          camera.near = distance / 100;
          camera.far = distance * 10;
          camera.updateProjectionMatrix();

          if (controlsRef.current) {
            controlsRef.current.target.set(0, 0, 0);
            controlsRef.current.update();
          }

          setGeometry(geometry);
        },
        undefined,
        (error) => {
          console.error("Error loading STL file:", error);
        }
      );
    }
  }, [fileUrl, camera]);

  return geometry ? (
    <mesh geometry={geometry}>
      <meshStandardMaterial color="gray" metalness={0.8} roughness={0.2} />
    </mesh>
  ) : null;
}

// Transparent Reference Box Component with Grid-Matching Color
function ReferenceBox() {
  return (
    <mesh>
      <boxGeometry args={[10, 10, 10]} />
      <meshBasicMaterial color="grey" wireframe opacity={0.5} transparent />
    </mesh>
  );
}

// Axis Labels
function AxisLabels() {
  return (
    <>
      <Html position={[6, 0, 0]}>
        <div style={{ color: "red" }}>X</div>
      </Html>
      <Html position={[0, 6, 0]}>
        <div style={{ color: "green" }}>Y</div>
      </Html>
      <Html position={[0, 0, 6]}>
        <div style={{ color: "blue" }}>Z</div>
      </Html>
    </>
  );
}

// Function to Generate Help Manual as PDF
function generateHelpManual() {
  const doc = new jsPDF();
  doc.setFontSize(16);
  doc.text("Splash Cloud - Help Manual", 10, 20);

  doc.setFontSize(12);
  doc.text("Features:", 10, 30);
  doc.text(
    "1. Load Geometry: Use the 'Load Geometry' button to load .STL files into the viewer.\n" +
      "2. Change Background: Select different background colors using the dropdown.\n" +
      "3. Toggle Axes: Show or hide the axes helper in the scene.\n" +
      "4. Reset Camera: Resets the view to the initial orientation.\n" +
      "5. 3D Viewer: Use the mouse to rotate, zoom, and pan in the 3D space.",
    10,
    40
  );

  doc.setFontSize(10);
  doc.text("Generated by Splash Cloud.", 10, 180);
  doc.save("Splash_Cloud_Help_Manual.pdf");
}

// Main App Component
function App() {
  const fileInputRef = useRef();
  const [fileUrl, setFileUrl] = useState(null);
  const [background, setBackground] = useState("linear-gradient(black, white)");
  const [axesVisible, setAxesVisible] = useState(true);
  const controlsRef = useRef();

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const url = URL.createObjectURL(file);
      setFileUrl(url);
    }
  };

  const handleResetCamera = () => {
    if (controlsRef.current) {
      controlsRef.current.reset();
    }
  };

  return (
    <div style={{ height: "100vh", display: "flex", flexDirection: "column", background }}>
      <header
        style={{
          textAlign: "center",
          padding: "10px 0",
          fontSize: "24px",
          fontWeight: "bold",
          background: "#282c34",
          color: "#ffffff",
        }}
      >
        Splash Cloud
      </header>

      <div style={{ display: "flex", flex: 1 }}>
        <div style={{ width: "200px", padding: "10px", background: "#f0f0f0" }}>
          <button
            onClick={() => fileInputRef.current.click()}
            style={{ width: "100%", padding: "10px", marginBottom: "10px" }}
          >
            Load Geometry
          </button>
          <select
            onChange={(e) => setBackground(e.target.value)}
            style={{ width: "100%", padding: "10px", marginBottom: "10px" }}
          >
            <option value="linear-gradient(black, white)">Black to White</option>
            <option value="lightcyan">Light Cyan</option>
            <option value="white">Plain White</option>
          </select>
          <button
            onClick={() => setAxesVisible((prev) => !prev)}
            style={{ width: "100%", padding: "10px", marginBottom: "10px" }}
          >
            Toggle Axes
          </button>
          <button
            onClick={handleResetCamera}
            style={{ width: "100%", padding: "10px", marginBottom: "10px" }}
          >
            Reset Camera
          </button>
          <button
            onClick={generateHelpManual}
            style={{ width: "100%", padding: "10px", marginBottom: "10px" }}
          >
            Download Help Manual
          </button>
          <input
            ref={fileInputRef}
            type="file"
            accept=".stl"
            style={{ display: "none" }}
            onChange={handleFileUpload}
          />
        </div>

        <Canvas style={{ flex: 1 }}>
          <ambientLight intensity={0.5} />
          <directionalLight position={[10, 10, 10]} intensity={1.5} />
          <directionalLight position={[-10, -10, -10]} intensity={1.0} />
          <gridHelper args={[10, 10]} />
          {axesVisible && <axesHelper args={[5]} />}
          {axesVisible && <AxisLabels />}
          <ReferenceBox />
          <OrbitControls ref={controlsRef} />
          {fileUrl && <STLViewer fileUrl={fileUrl} />}
        </Canvas>
      </div>
    </div>
  );
}

export default App;
